/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectoedd_2;

import javax.swing.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * Clase Ventana1 para crear una interfaz gráfica de usuario en la que se pueda cargar archivos JSON desde el dispositivo, 
 * leer el mismo y buscar la información de alguna persona en específico.
 * 
 * @author Sofia Machado
 */

public class Ventana1 extends javax.swing.JFrame {
    private hashTable hashTable; // Instancia de la tabla de dispersión
    /**
     * Constructor de la clase Ventana1.
     * Este constructor lo que hace es inicializar los componentes de la ventana y a la vez centra la ventana en la pantalla.
     */
    public Ventana1() {
        initComponents();
        this.setLocationRelativeTo(null);
        hashTable = new hashTable(100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CargarJSON = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Búsqueda de personas en JSON");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, -1));

        CargarJSON.setText("Cargar");
        CargarJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarJSONActionPerformed(evt);
            }
        });
        jPanel1.add(CargarJSON, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /**
     * Este boton le permite al usuario seleccionar un archivo JSON de sus archivos y procesa su contenido.
     */
    private void CargarJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarJSONActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos JSON", "json"));
        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            StringBuilder jsonContent = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    jsonContent.append(line);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            String jsonString = jsonContent.toString();

            /**
            * Como se encontró un doble espacio en uno de los JSON proporcionados que estaba causando problemas con su lectura
            * se implementó una manera de reemplazar múltiples espacios por un solo espacio y evitar errores
            */
            jsonString = jsonString.trim().replaceAll(" +", " ");

            // Verifica si el JSON está vacío  
            if (jsonString.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "El JSON seleccionado está vacío.");
                return;
            }

            // Procesa el JSON  
            try {
                JSONParser parser = new JSONParser();
                JSONObject jsonObject = (JSONObject) parser.parse(jsonString);
                for (Object houseName : jsonObject.keySet()) {
                    JSONArray houseArray = (JSONArray) jsonObject.get(houseName);
                    for (Object person : houseArray) {
                        JSONObject personObject = (JSONObject) person;
                        String personName = (String) personObject.keySet().iterator().next();
                        JSONArray personDetails = (JSONArray) personObject.get(personName);
                        Persona nuevaPersona = new Persona(personName);

                        for (Object detail : personDetails) {
                            JSONObject detailObject = (JSONObject) detail;
                            if (detailObject.containsKey("Of his name")) {
                                nuevaPersona.setOfHisName((String) detailObject.get("Of his name"));
                            } else if (detailObject.containsKey("Born to")) {
                                String parent = (String) detailObject.get("Born to");
                                if (nuevaPersona.father == null) {
                                    nuevaPersona.setFather(parent);
                                } else {
                                    nuevaPersona.setMother(parent);
                                }
                            } else if (detailObject.containsKey("Held title")) {
                                nuevaPersona.setTitle((String) detailObject.get("Held title"));
                            } else if (detailObject.containsKey("Of eyes")) {
                                nuevaPersona.setOfEyes((String) detailObject.get("Of eyes"));
                            } else if (detailObject.containsKey("Of hair")) {
                                nuevaPersona.setOfHair((String) detailObject.get("Of hair"));
                            } else if (detailObject.containsKey("Notes")) {
                                nuevaPersona.setNotes((String) detailObject.get("Notes"));
                            } else if (detailObject.containsKey("Fate")) {
                                nuevaPersona.setFate((String) detailObject.get("Fate"));
                            }
                        }

                        // Añade a la persona a la tabla de dispersión
                        hashTable.put(nuevaPersona);
                    }
                }

                // Interacción para buscar persona
                buscarPersonaEnTabla();
            } catch (ParseException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al parsear el JSON.");
            }
        }
    }//GEN-LAST:event_CargarJSONActionPerformed

    /**
     * Método que permite buscar una persona en la tabla de dispersión.
     */
     private void buscarPersonaEnTabla() {
        String input = JOptionPane.showInputDialog("Ingrese la persona que desea buscar \n (Nombre (Ej: William Baratheon) o nombre y su numeral (Ej: William Baratheon, Second of his name)):");
        if (input != null && !input.trim().isEmpty()) {
            String[] parts = input.split(", ");

            // Verifica si se ingresó solo el nombre  
            if (parts.length == 1) {
                String nombre = parts[0].trim();
                Persona personaEncontrada = hashTable.get(nombre, null); // Buscar solo por nombre  
                if (personaEncontrada != null) {
                    JOptionPane.showMessageDialog(null, personaEncontrada.toString(), "Información de la persona", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Persona no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if (parts.length == 2) {
                // Busca por nombre y numeral en la familia
                String nombreCompleto = parts[0].trim();
                String ofHisName = parts[1].split(" ")[0].trim(); // Solo obtenemos el numeral
                Persona personaEncontrada = hashTable.get(nombreCompleto, ofHisName);
                if (personaEncontrada != null) {
                    JOptionPane.showMessageDialog(null, personaEncontrada.toString(), "Información de la persona", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Persona no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Formato inválido. Use el formato indicado", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarJSON;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
